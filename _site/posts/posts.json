[
  {
    "path": "posts/installer-r/",
    "title": "Installer R",
    "description": "Comment télécharger et installer R sur son ordinateur.",
    "author": [
      {
        "name": "Gergana Daskalova",
        "url": "https://ourcodingclub.github.io/tutorials/intro-to-r/"
      },
      {
        "name": "Jonathan Kitt (adaptation)",
        "url": {}
      }
    ],
    "date": "2022-10-13",
    "categories": [
      "R",
      "Installation"
    ],
    "contents": "\r\n\r\nContents\r\nQu’est-ce que R ?\r\n\r\nCe tutoriel est adapté de Getting\r\nstarted with R and RStudio du site Our Coding Club.\r\n\r\n\r\nDans ce tutoriel, nous allons voir comment télécharger et installer\r\nR.\r\nQu’est-ce que R ?\r\nTélécharger R\r\nInstaller R\r\n\r\nQu’est-ce que R ?\r\n\r\nR est un langage de programmation statistique qui a\r\nrapidement gagné en popularité dans de nombreux domaines\r\nscientifiques.\r\nIl a été développé par Ross Ihaka et Robert\r\nGentleman, du Département de Statistiques de l’Université\r\nd’Auckland, comme implémentation libre du langage de\r\nprogrammation S.\r\n\r\n1991\r\nCréation du langage R\r\n1993\r\nR est dévoilé au public\r\n1996\r\nArticle\r\ndans le Journal of Computational and Graphical\r\nStatistics\r\n\r\nR désigne également le logiciel qui utilise ce\r\nlangage pour des calculs statistiques (et tout un tas d’autres\r\napplications !).\r\nIl dispose d’une communauté en ligne très active\r\nainsi que d’extensions pour presque tous les domaines\r\net applications possibles et imaginables.\r\n\r\nTip: This is some instruction.\r\n\r\n\r\nHello world!\r\n\r\n\r\n\r\nNOTICE!\r\n\r\nThank you for noticing this new notice! Your\r\nnoticing it has been noted, and will be reported to the\r\nauthorities!\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-10-13T10:06:09+02:00",
    "input_file": {}
  },
  {
    "path": "posts/premiers-pas-avec-r/",
    "title": "Premiers pas avec R",
    "description": "Débuter avec R et RStudio.",
    "author": [
      {
        "name": "Gergana Daskalova",
        "url": "https://ourcodingclub.github.io/tutorials/intro-to-r/"
      },
      {
        "name": "Jonathan Kitt (adaptation)",
        "url": {}
      }
    ],
    "date": "2022-05-02",
    "categories": [
      "R",
      "RStudio",
      "Introduction"
    ],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nTélécharger R et RStudio\r\nImporter et vérifier les données\r\nCompter le nombre d’espèces menacées\r\nCréer un vecteur et le représenter\r\nCréer un dataframe et le représenter\r\nDéfi\r\nGlossaire\r\n\r\n\r\n\r\n\r\nCe tutoriel est adapté de Getting started with R and RStudio du site Our Coding Club.\r\n\r\n\r\n\r\n\r\n\r\nIntroduction\r\n\r\nLes objectifs de ce tutoriel sont les suivants :\r\nComprendre ce qu’est R (et RStudio)\r\nPrendre la bonne habitude de travailler avec des scripts\r\nApprendre à importer des données dans R\r\nApprendre à manipuler des objets (vecteurs et data frames)\r\nCréer un graphique basique\r\nVoici les étapes que nous allons suivre pour y parvenir :\r\nTélécharger R et RStudio\r\nImporter et vérifier les données\r\nCompter le nombre d’espèces menacées\r\nCréer un vecteur et le représenter\r\nCréer un data frame et le représenter\r\nDéfi\r\nGlossaire\r\nQu’est-ce que R?\r\nR est un langage de programmation statistique qui a rapidement gagné en popularité dans de nombreux domaines scientifiques. Il a été développé par Ross Ihaka et Robert Gentleman comme implémentation libre du langage de programmation S.\r\n\r\nR désigne également le logiciel qui utilise ce langage pour des calculs statistiques (et tout un tas d’autres applications !). Il dispose d’une communauté en ligne très active ainsi que d’extensions pour presque tous les domaines et applications possibles et imaginables.\r\n\r\nContrairement à d’autres logiciels de statistiques comme Minitab ou SPSS, R peut être exécuté entièrement en ligne de commande et ne nécessite pas d’interface graphique, ce qui lui confère une grande flexibilité.\r\n\r\nVoici quelques avantages de R :\r\nC’est un outil libre et open source (tout le monde peut utiliser le code et voir comment il fonctionne)\r\nC’est un langage de programmation plutôt qu’une interface graphique, ce qui permet à l’utilisateur de sauvegarder facilement des scripts sous forme de texte pour les ré-utiliser ou les partager\r\nBeaucoup de personnes l’utilisent dans beaucoup de domaines différents - il est rare d’être confronté à un problème qui n’a jamais été résolu !\r\n\r\nTélécharger R et RStudio\r\nLa plupart des utilisateurs interagissent avec R à l’aide d’une interface graphique, dont la plus connue est RStudio. RStudio permet d’avoir accès dans une seule fenêtre à vos scripts, à vos données, à vos graphiques, à vos résultats, ainsi qu’à de l’aide.\r\n\r\nTéléchargez R sur le site du CRAN (The Comprehensive R Archive Network)\r\nTéléchargez RStudio (“free open source desktop version”)\r\nSur Mac, vous aurez également besoin de XQuartz\r\n\r\nOuvrez RStudio, puis cliquez sur “File / New File / R script”\r\n\r\n\r\n\r\nVous verrez une fenêtre comme celle ci-dessus, avec quatre panneaux :\r\n1) La console : vous pouvez y taper du code et l’exécuter avec Entrée.\r\n\r\nEssayez de taper et d’exécuter 2+2\r\n2) Le script : vous pouvez - et c’est préférable - y taper du code. Pour l’exécuter, placez-vous à la fin de la ligne et utilisez la combinaison de touches Ctrl + R (Windows) ou Cmd + Entrée (Mac).\r\n\r\nSur les ordinateurs avec une version récente de Windows, Ctrl + Entrée\r\n3) L’environnement : aperçu de votre espace de travail (données importées, objets créés, fonctions définies, …).\r\n4) Fichiers / Graphiques / Packages / Aide : permet de naviguer dans vos dossiers, de visualiser vos graphiques, de voir quels packages sont installés et chargés, et d’obtenir de l’aide.\r\nA propos des scripts :  gardez bien à l’esprit que le code tapé directement dans la console ne sera pas sauvegardé par R : il disparaît une fois exécuté (vous pouvez toutefois accéder aux dernières commandes à l’aide de la touche Flèche du haut de votre clavier). L’utilisation d’un script pour taper votre code vous permet d’en garder une trace. C’est un peu comme quand vous rédigez un document dans Word : vous pouvez sauvegarder votre progression pour reprendre là où vous en étiez, ou faire des modifications. Lorsque vous tapez du code dans un script, pensez à le sauvegarder régulièrement (Ctrl + S).\r\nIl est fortement recommandé d’ajouter à votre code des commentaires décrivant les étapes. Pour cela, insérez un hashtag (#) devant une ligne de votre script (ou Ctrl + Shift + C). Toutes les lignes qui commencent par un # seront considérées par R comme du texte et non du code, et ne seront pas exécutées.\r\nCes commentaires apporteront des informations précieuses pour toute personne qui lira votre script (y compris vous-même quand vous reviendrez dessus dans un certain temps !). Comme tout document écrit, les scripts sont plus facilement lisibles quand ils sont bien structurés et clairs.\r\nA propos de l’espace de travail :  votre espace de travail contient tout ce que vous utilisez lors d’une session R. En quittant R, vous aurez le choix de sauvegarder ou non cet espace de travail. Il est préférable de ne pas le faire et de démarrer chaque session avec en espace de travail vide. \r\nTéléchargez les données\r\nLa meilleure façon d’apprendre un nouveau langage est de le pratiquer. Nous allons analyser une liste d’espèces d’oiseaux menacées en Auvergne (données de 2015 obtenues sur le site de la DREAL). Ces données se trouvent dans un fichier appelé oiseaux.csv.\r\n1) Créez un nouveau dossier sur votre ordinateur : vous allez y télécharger les données, et vous pourrez y sauvegarder votre script et vos graphiques. Choisissez un nom explicite, par exemple codons_01_intro_r\r\n\r\nEvitez les espaces vides dans vos noms de dossiers !\r\n2) Cliquez sur ce lien pour télécharger le fichier oiseaux.csv\r\n3) Cliquez sur “Code” puis “Download ZIP” (voir ci-dessous)\r\n\r\n\r\n\r\n4) Choisissez comme emplacement de sauvegarde le dossier que vous venez de créer\r\n5) Dézippez le dossier\r\nCommencez à écrire votre script\r\nPour l’instant, vous pouvez noter la date et l’objectif du tutoriel - compter le nombre d’espèces d’oiseaux menacées d’extinction en Auvergne. Vous pouvez copier l’exemple ci-dessous pour le coller et l’éditer dans votre propre script :\r\n\r\n\r\n# Ateliers codon(s)!\r\n# 01 - Premiers pas avec R\r\n# Lundi 09/05/2022\r\n\r\n\r\nLes lignes suivantes dans votre script servent généralement à charger les packages dont vous aurez besoin pour votre analyse. Un package contient des commandes qui peuvent être chargées dans R pour apporter des fonctionnalités supplémentaires (il existe par exemple des packages pour formater des données ou pour créer des cartes).\r\nUn package doit tout d’abord être téléchargé et installé sur votre ordinateur à l’aide de la commande install.packages(\"nom-du-package\") avant d’être chargé pour être utilisé à l’aide de la commande library(nom-du-package). Un package n’a besoin d’être installé qu’une seule fois, vous pouvez donc le faire directement dans la console plutôt que de sauvegarder la ligne de code dans votre script et d’ainsi le ré-installer à chaque fois que vous exécutez votre script. Nous allons utiliser le package dplyr qui fournit des fonctionnalités supplémentaires pour la manipulation et le formatage de données.\r\n\r\nNotez bien la présence de guillemets autour du nom du package dans l’appel à la fonction install.packages(), et leur absence dans l’appel à la fonction library()\r\n\r\n\r\ninstall.packages(\"dplyr\")\r\nlibrary(dplyr)\r\n\r\n\r\nNous allons maintenant définir notre répertoire de travail - le dossier dans lequel R cherchera les données à importer et sauvegardera les graphiques. C’est dans notre cas le dossier dans lequel nous avons téléchargé les données.\r\nQuand vous aurez à travailler sur des projets plus importants, vous pourrez tout à fait créer un dossier racine (par ex. “nom_du_projet/”), le définir comme répertoire de travail, et créer des sous-dossiers pour organiser les fichiers (par ex. “nom_du_projet/donnees_brutes/”, “nom_du_projet/figures/”, …).\r\nPour afficher le réperoire de travail, utilisez la commande getwd() (pour get working directory). La commande setwd(\"nom-du-repertoire-de-travail\") (set working directory) permet de définir un nouveau répertoire de travail.\r\n\r\nFaites attention au sens des slashes dans vos chemins de dossiers !\r\n\r\n\r\nsetwd(\"C:/User/Codons-01-PremiersPasAvecR\")\r\n# Remplacez le chemin ci-dessus par le votre\r\n\r\n\r\n\r\nL’auto-complétion est votre alliée ! Tapez quelques lettres puis sur la touche Tab et R complètera pour vous.\r\nImporter et vérifier les données\r\nPour importer les données dans RStudio, deux options s’offrent à vous :\r\nCliquer sur le bouton Import Dataset\r\n\r\n\r\n\r\nIndiquez quel fichier vous souhaitez importer, et RStudio vous proposera un aperçu de vos données. Assurez-vous qu’à côté de Heading vous avez sélectionné Yes (ceci indique à R qu’il doit considérer la première ligne de vos données comme des noms de colonnes). Cliquez enfin sur Import.\r\n\r\n\r\n\r\nDans la console vous verrez le code utilisé pour importer vos données, y compris le chemin vers votre fichier - il est utile de copier cette ligne de code et de la coller dans votre script, pour que vous sachiez d’où vient votre jeu de données.\r\nVous remarquerez que le chemin vers votre fichier débute par C:/. Il s’agit du chemin absolu vers le fichier à importer, qui ne tient pas compte du fait que vous avez défini un répertoire de travail. Vous pouvez également utiliser le chemin relatif qui indique l’emplacement du fichier à partir de votre répertoire de travail (voir ci-dessous)\r\nUtiliser la commande read.csv() : R fonctionne mieux avec des fichiers .csv (valeurs séparées par des virgules). Si vous travaillez dans Excel, cliquez sur Enregistrer sous et choisissez csv comme extension de fichier.\r\n\r\nDans Excel, évitez les espaces dans vos noms de colonnes (ex : nom_latin plutôt que nom latin)\r\nCertains ordinateurs utilisent le point-virgule ; comme séparateur dans les fichiers .csv. Vous pouvez dans ce cas utiliser la fonction read.csv2(), ou préciser dans la fonction read.csv() l’argument sep = \";\".\r\n\r\n\r\noiseaux <- read.csv(\"Codons-01-PremiersPasAvecR-main/oiseaux.csv\")\r\n# modifiez le chemin vers le fichier si nécessaire\r\n\r\n\r\nA propos des objets : R est langage orienté objet - cela signifie que tout ce que vous importez et créez est stocké dans des objets que vous allez nommer. Ici, nous avons assigné le fichier oiseaux.csv à l’objet oiseaux à l’aide de la flèche <-. Nous aurions tout à fait pu l’appeler mesdonnees ou oiseaux_liste_rouge_auvergne, mais il est préférable de choisir un nom unique, informatif et court. Dans le panneau Environment de RStudio vous pouvez voir les noms de tous les objets actuellement chargés dans R. Assurez-vous que vous voyez bien l’objet oiseaux.\r\nQuand vous importez vos données dans R, il est très probable qu’elles deviennent un objet qu’on appelle un data frame : un tableau contenant des lignes (observations) et des colonnes (variables).\r\nUne des premières choses à faire est de vous assurer que vos données ont été importées sans erreur. Il est recommandé de toujours exécuter ce code dans la console et de vérifier le résultat - voyez-vous des erreurs, est-ce que les nombres/noms ont du sens ? Si vous passiez directement à l’analyse, vous risqueriez de vous rendre compte plus tard que R n’a pas importé vos données correctement et vous devriez recommencer, ou pire, vous pourriez analyser de mauvaises données sans vous en rendre compte. Pour visualiser davantage que les quelques premières lignes, vous pouvez également cliquer sur l’objet dans le panneau Environment, ce qui affichera un tableau dans un nouvel onglet à côté de votre script. Des fichiers peuvent être trop larges pour êtres affichés entirement, gardez donc à l’esprit qu’il peut y avoir des lignes ou des colonnes manquantes.\r\n\r\n\r\nhead(oiseaux)  # affiche les premières lignes\r\ntail(oiseaux)  # affiche les dernières lignes\r\nstr(oiseaux)  # affiche le type de variables\r\n\r\n\r\nLa commande str(nom.objet) affiche la structure de vos données. Très souvent, les analyses ne se déroulent pas comme prévu car R s’est trompé de type de variable. Imaginez que vos données comportent quatre groupes d’étude appelés “1, 2, 3, 4”. Vous savez pertinnement qu’il s’agit d’une variable catégorique (un facteur), mais R peut considérer qu’il s’agit d’une variable numérique.\r\n\r\nPensez toujours à vérifier la structure de vos données !\r\nLa fonction str(oiseaux) nous indique que la variable categorie est une chaîne de caractères (chr). Nous préférerions que R considère cette variable comme étant catégorique - un facteur. Nous allons le préciser en accédant à la colonne concernée à l’aide du signe dollar $ :\r\n\r\n\r\nhead(oiseaux$categorie)  # premiers éléments de la variable\r\nclass(oiseaux$categorie)  # type de variable\r\noiseaux$categorie <- as.factor(oiseaux$categorie)\r\n\r\n\r\nLa dernière ligne du code ci-dessus permet de transformer la variable categorie en un facteur. La fonction as.factor(oiseaux$categorie) toute seule serait exécutée, mais ne modifierait pas les données stockées dans l’objet oiseaux. Il faut pour cela ré-assigner cette variable transformée en facteur à la variable d’origine. Pour vous assurer que l’opération a bien fonctionné, vous pouvez exécuter à nouveau la fonction class(oiseaux$categorie).\r\nLes fonctions suivantes permettent d’explorer autrement vos données :\r\n\r\n\r\ndim(oiseaux)  # dimensions de l'objet\r\nsummary(oiseaux)  # synthèse de l'objet\r\nsummary(oiseaux$categorie)  # synthèse de la variable\r\n\r\n\r\nCompter le nombre d’espèces menacées\r\nNotre objet oiseaux dresse une liste des espèces d’oiseaux menacées d’extinction en Auvergne, avec différents niveaux de préoccupation.\r\nNous allons compter le nombre d’espèces pour chaque niveau de préoccupation et créer une visualisation de ce comptage.\r\nCommençons par séparer oiseaux en plusieurs objets, un pour chaque niveau de menace, à l’aide de la fonction filter() du package dplyr.\r\n\r\n\r\nen_danger_critique <- filter(oiseaux, categorie == \"En danger critique\")\r\n# Le 1er argument de la fonction est le data frame, \r\n# Le 2e argument est la condition à appliquer au filtre\r\n\r\n\r\n\r\nL’opérateur == permet de sélectionner les valeurs “strictement égales à”\r\nR est sensible à la casse : filter(oiseaux, categorie == \"en danger critique\") ne fonctionnera pas !\r\nProcédons de la même façon pour chaque catégorie. Si vous avez un doute sur le nom ou l’orthographe d’une des catégories, pensez à la fonction summary(oiseaux$categorie).\r\nUne fois que vous avez créé tous les objets, vous allez pouvoir compter le nombre d’espèces pour chaque catégorie.\r\nNous allons pour cela imbriquer deux fonctions : unique() (pour identifier chaque espèce) et length() (pour les compter).\r\n\r\nVous pouvez essayer ces deux fonctions séparément dans la console\r\n\r\n\r\na <- length(unique(en_danger_critique$nom_francais))\r\n# choisissez des noms pratiques pour vos objets\r\n# \"a\" n'est peut-être pas le plus explicite ...\r\n\r\n\r\nProcédez de la même façon pour toutes les catégories. Cette manière de procéder peut vous sembler rébarbative … Nous verrons dans un prochain tutoriel comment procéder de manière plus efficace !\r\nTapez dans la console le nom d’un des objets que vous venez de créer. Que vous retourne-t-elle ?\r\nCréer un vecteur et le représenter\r\nNous allons maintenant combiner tous ces objets dans un vecteur - un objet à une dimension (à la différence d’un data frame qui en possède deux).\r\nNous utilisons pour cela la fonction c() (pour concaténer), ainsi que la fonction names() pour ajouter des étiquettes aux valeurs.\r\n\r\n\r\ncomptage_especes <- c(a,b, c, d, e)\r\nnames(comptage_especes) <- c(\"En danger critique\",\r\n                             \"En danger\",\r\n                             \"Vulnerable\",\r\n                             \"Quasi-menacee\",\r\n                             \"Preoccupation mineure\")\r\n\r\n\r\n\r\nAttention à garder le même ordre !\r\nNotes :\r\n- Les espaces avant et après la flèche <- et après la virgule , facilitent la lecture du code\r\n- Faites attention à vérifier que les valeurs du vecteur correspondent bien aux étiquettes - vous ne voudriez pas inverser les espèces “En danger critique” avec les espèces “Quasi-menacées”! L’utilisation d’un script permet de revenir sur le code et de vérifier qu’on ne s’est pas trompé. Une bonne pratique serait de nommer les objets de façon plus explicite, comme nb_en_danger_critique, nb_en_danger, …\r\n- Si vous cliquez à l’aide de la souris après une parenthèse, RStudio surlignera la parenthèse lui correspondant. Les parenthèses manquantes, en particulier quand vous utilisez des fonctions imbriquées comme vous l’avez fait avec length(unique()) sont une des sources de frustration et d’erreur les plus courantes quand vous commencez à coder !\r\nNous pouvons maintenant visualiser le nombre d’espèces par catégorie à l’aide de la fonction barplot().\r\nLes graphiques s’affichent dans le panneau inférieur droit de RStudio.\r\n\r\n\r\nbarplot(comptage_especes)\r\n\r\n\r\nEt voilà votre premier graphique avec R ! Mais il y a des choses à modifier : il manque des titres aux axes, toutes les étiquettes ne sont pas visibles, et la valeur pour les espèces dans la catégorie “Préoccupation mineure” (n = 68) dépasse la plus grande valeur affichée sur l’axe Y.\r\nPour savoir comment apporter ces modifications à votre graphique, utilisez la fonction help(barplot) ou ?barplot pour afficher l’aide de la fonction. Survolez le document qui s’affiche et essayez de trouver des solutions.\r\n\r\n\r\nhelp(barplot)  # aide de la fonction barplot\r\nhelp(par)  # aide pour les graphiques\r\n\r\n\r\nNous aimerions également sauvegarder notre graphique. Là encore, vous avez deux options :\r\n- Cliquer sur Export dans le panneau des graphiques : choisissez où sauvegarder le graphique (par défaut dans votre répertoire de travail) et modifiez le nom du fichier pour qu’il soit plus explicite que Rplot01.png. Vous pouvez aussi ajuster les dimensions de la figure.\r\n\r\n\r\n\r\nUtiliser les fonctions png() et dev.off() qui servent respectivement à ouvrir et fermer l’outil graphique :\r\n\r\n\r\npng(\"barplot.png\",\r\n    width = 1600, height = 600)\r\n\r\nbarplot(comptage_especes,\r\n        xlab = \"Niveau de menace\", ylab = \"Nombre d'espèces\",\r\n        ylim = c(0, 70),\r\n        cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5)\r\n\r\ndev.off()\r\n\r\n\r\n\r\nL’argument cex permet d’augmenter (> 1) ou de diminuer (< 1) la taille du texte\r\n\r\n\r\n\r\nCréer un dataframe et le représenter\r\nNous avons travaillé jusqu’ici avec des vecteurs, un type d’objet bien adapté quand on manipule une seule série de valeurs à la fois. Dans la pratique, nous manipulons souvent plusieurs variables et plusieurs types de données en même temps - par exemple des valeurs continues et des valeurs catégoriques. Les data frames sont alors mieux adaptés : il s’agit de tableaux de valeurs ayant une structure en deux dimensions, des lignes et des colonnes, chaque colonne pouvant contenir un type différent de données.\r\nNous pourrions par exemple avoir un tableau de données dont une colonne appelée “Envergure” contient des mesures d’envergures chez différentes espèces d’oiseaux, et une deuxième colonne appelée “Espèce” contient les noms des espèces dont on a mesuré l’envergure.\r\nLa matrice est un autre format possible de données : elle peut également contenir plusieurs lignes, mais toutes les variables d’une matrice doivent être du même type et contenir le même nombre d’éléments.\r\nConseil de bonne pratique : conservez toujours une copie de vos données brutes ! Votre script R vous permet de manipuler et modifier ces données sans toucher aux données brutes. Si vous utilisez des logiciels de retouche photo, c’est un peu la même chose que d’ajouter des couches apportant des modifications à votre cliché sans modifier la photo d’origine. Ceci dit, si vos données brutes nécessitent un long morceau de code pour être analysables, vous pouvez sauvegarder une version nettoyée de vos données brutes pour ne pas avoir à refaire toutes les étapes de nettoyage des données.\r\nNous allons utiliser deux nouvelles fonctions : data.frame() pour créer notre data frame et write.csv() pour le sauvegarder. Nous allons créer les objets “categories” et “comptage”, transformer l’objet “categories” en facteur, puis rassembler ces deux objets dans un data frame.\r\n\r\n\r\n# Creer un objet \"categories\"\r\ncategories <- c(\"En danger critique\",\r\n                \"En danger\",\r\n                \"Vulnerable\",\r\n                \"Quasi-menacee\",\r\n                \"Preoccupation mineure\")\r\n\r\n# Transformer cet objet en facteur\r\ncategories_f <- factor(categories)\r\n\r\n# Creer un objet \"comptage\"\r\ncomptage <- c(a, b, c, d, e)\r\n\r\n# Creer un data frame avec ces deux vecteurs\r\nespeces_menacees <- data.frame(categories_f, comptage)\r\n\r\n# Sauvegarder le data frame\r\nwrite.csv(especes_menacees, file = \"especes_menacees.csv\")\r\n\r\n\r\nPour créer un barplot à partir de ce data frame, vous devrez modifier le code utilisé précédemment - il faut en effet préciser quelle variable du data frame vous souhaitez représenter.\r\n\r\n\r\npng(\"barplot2.png\",\r\n    width = 1600, height = 600)\r\n\r\nbarplot(especes_menacees$comptage,\r\n        names.arg = c(\"En danger critique\",\r\n                      \"En danger\",\r\n                      \"Vulnerable\",\r\n                      \"Quasi-menacee\",\r\n                      \"Preoccupation mineure\"),\r\n        xlab = \"Niveau   de menace\", ylab = \"Nombre d'especes\",\r\n        ylim = c(0, 70),\r\n        cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5)\r\n\r\n\r\n\r\nIl existe une manière plus simple de préciser les étiquettes …\r\nBilan du tutoriel :\r\nVous vous êtes familiarisé avec l’interface RStudio\r\nVous savez comment créer et annoter un fichier de script\r\nVous pouvez importer vos propres données dans RStudio\r\nVous savez comment vérifier et explorer vos données\r\nVous pouvez générer des graphiques basiques et les exporter\r\nDéfi\r\nSi c’est votre premier contact avec R, ne vous inquiétez pas si vous ne comprenez pas tout, tout de suite. Revenez à tête reposée sur les parties que vous avez trouvées plus difficiles.\r\nVoici un petit défi pour mettre en pratique ce que vous avez vu dans ce tutoriel.\r\nVous verrez ci-dessous des données (fictives) de mesures d’envergure (en cm) pour quatre espèces différentes d’oiseaux. Essayez de créer un barplot de l’envergure moyenne pour chacune des espèces et sauvegardez-le sur votre ordinateur.\r\n\r\nIl vous faudra trouver une fonction permettant de calculer une moyenne\r\nespece\r\nenvergure (cm)\r\nAigle\r\n195\r\nChouette\r\n85\r\nColibri\r\n8\r\nMoineau\r\n24\r\nAigle\r\n201\r\nChouette\r\n102\r\nColibri\r\n9\r\nMoineau\r\n21\r\nAigle\r\n185\r\nChouette\r\n91\r\nColibri\r\n9\r\nMoineau\r\n22\r\nSolution\r\nNe regardez pas avant d’avoir essayé !\r\nIl n’existe pas une seule solution possible, plusieurs façons de procéder amèneront au même résultat. Les noms des objets et l’apparence du graphique seront sans doute différents, et cela ne pose aucun problème - du moment que les valeurs elles-mêmes sont correctes.\r\n\r\n\r\nShow code\r\n\r\n# Extraire les envergures pour chaque espece\r\nenv_aigle <- c(195, 201, 185)\r\nenv_chouette <- c(85, 102, 91)\r\nenv_colibri <- c(8, 9, 9)\r\nenv_moineau <- c(24, 21, 22)\r\n\r\n# Calculer l'envergure moyenne\r\nenv_moy_aigle <- mean(env_aigle)\r\nenv_moy_chouette <- mean(env_chouette)\r\nenv_moy_colibri <- mean(env_colibri)\r\nenv_moy_moineau <- mean(env_moineau)\r\n\r\n# Rassembler ces valeurs moyennes dans un vecteur\r\nenv_moyenne <- c(env_moy_aigle, env_moy_chouette, env_moy_colibri, env_moy_moineau)\r\n\r\n# Creer un vecteur avec les noms des especes (attention à l'ordre !)\r\nespeces <- c(\"Aigle\", \"Chouette\", \"Colibri\", \"Moineau\")\r\n\r\n# Transformer ce vecteur en un facteur\r\nespeces_f <- as.factor(especes)\r\nclass(especes_f)\r\n\r\n# Combiner les deux vecteurs dans un data frame\r\nenvergure <- data.frame(especes_f, env_moyenne)\r\n\r\n# Sauvegarder le barplot dans un fichier\r\npng(\"barplot_envergure.png\",\r\n    width = 1600, height = 600)\r\n\r\nbarplot(envergure$env_moyenne,\r\n        names.arg = envergure$especes_f,\r\n        xlab = \"Espèces\", ylab = \"Envergure moyenne\",\r\n        ylim = c(0, 200),\r\n        cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5,\r\n        col = \"gold\")  # modifier la couleur des barres\r\n\r\ndev.off()\r\n\r\n\r\nGlossaire\r\n\r\nVoici quelques termes importants vus dans ce tutoriel :\r\nargument : élément d’une fonction, essentiel ou optionnel, qui précise ou modifie la façon dont la fonction est exécutée. Par exemple, il peut s’agir du chemin vers un fichier qui sera importé, ou de l’emplacement où sera sauvegardé un fichier : file = \"chemin-vers-le-fichier. Il peut aussi modifier les couleurs d’un graphique : col = \"blue\". Vous pouvez trouver une liste des arguments d’une fonction à l’aide de la commande ?nom-de-la-fonction.\r\nclasse : le type de données contenu dans une variable : habituellement des charactères (texte/mots), des nombres entiers ou relatifs, ou des facteurs (des valeurs de groupement, utiles quand vos données contiennent de multiples observations issues de différents sites ou traitements).\r\ncommande : un morceau de code qui exécute une action, contient généralement une ou plusieurs fonctions. Vous pouvez exécuter une commande en cliquant sur “Run” ou grâce aux raccourcis clavier comme Cmd + Entrée, Ctrl + Entrée ou Ctrl + R.\r\ncommentaire : un morceau de texte dans un script qui débute par un hashtag # et qui n’est pas lu comme une commande. Les commentaires rendent le code plus facilement lisible pour d’autres personnes : utilisez-les pour créer des sections dans votre script et pour annoter chaque étape de votre analyse.\r\nconsole : la fenêtre dans laquelle vous pouvez taper du code directement en ligne de commande (2+2 puis Entrée retournera 4), et où les résultats des commandes seront affichés.\r\ndata frame : un type d’objet R composé de nombreuses lignes et colonnes (pensez à une feuille Excel). Généralement les colonnes contiennent différentes variables (par exemple âge, couleur, poids, envergure), et les lignes les observations de ces variables (par exemple oiseau1, oiseau2, oiseau3).\r\nespace de travail : c’est votre environnement de travail virtuel, il contient toutes les fonctions des packages que vous avez chargés, les objets que vous avez créés, et ainsi de suite. Il est préférable de démarrer une session de travail avec un espace de travail vide.\r\nfichier csv : un type de fichier couramment utilisé pour importer des données dans R, où les valeurs des différentes variables sont compressées (une chaîne, ou une ligne de valeurs par ligne) et séparées seulement par des virgules (indiquant les colonnes). R peut aussi lire des fichiers Excel (.xlsx), mais cela n’est pas recommandé car il est difficile d’éviter les erreurs de formatage.\r\nfonction : du code qui exécute une action, c’est-à-dire tout ce que vous faites dans R. Une fonction prend une entrée, la modifie d’une façon ou d’une autre, et retourne une sortie (un objet, un résultat de test, un fichier, un graphique). Il existe des fonctions pour importer, convertir et manipuler des données, pour effectuer des calculs spécifiques (essayez de deviner ce que retourneraient les fonctions min(10, 15, 5) et max(10, 15, 5)), générer des graphiques, et bien davantage.\r\nobjet : les briques de construction de R. Si R était un langage parlé, les fonctions seraient les verbes (actions) et les objets les noms (les sujets ou les objets de ces actions). On fait appel à un objet par son nom sans guillemets. Les objets permettent de stocker des données, et prennent différentes formes. Les objets les plus courants sont les data frames et les vecteurs, mais il en existe d’autres, comme les listes et les matrices.\r\npackage : un ensemble de fonctions qui apportent des fonctionnalités supplémentaires à R. De nombreux packages sont inclus dans R, d’autres peuvent être téléchargés pour des besoins spécifiques.\r\nrépertoire de travail : le dossier sur votre ordinateur associé à votre session R actuelle, contenant les données que vous allez importer et où vous sauvegarderez des fichiers. Vous pouvez le définir au début de votre session à l’aide de la fonction setwd().\r\nscript : comme un éditeur de texte, un script vous permet d’écrire votre code et de le sauvegarder pour des usages futurs. Il contient un mélange de code et de commentaires et est sauvegardé comme un simple fichier texte que vous pouvez aisément partager pour que n’importe qui puisse reproduire votre travail.\r\nvecteur : un type d’objet R qui ne contient qu’une seule dimension : il stocke une ligne de valeurs qui peuvent être des caractères, des nombres, etc.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/premiers-pas-avec-r/img/rstudio_panels.png",
    "last_modified": "2022-10-12T15:19:21+02:00",
    "input_file": {}
  }
]
