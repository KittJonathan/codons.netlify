[
  {
    "path": "posts/premiers-pas-avec-r/",
    "title": "Premiers pas avec R",
    "description": "Débuter avec R et RStudio.",
    "author": [
      {
        "name": "Gergana Daskalova",
        "url": "https://ourcodingclub.github.io/tutorials/intro-to-r/"
      },
      {
        "name": "Jonathan Kitt (adaptation)",
        "url": {}
      }
    ],
    "date": "2022-05-02",
    "categories": [
      "R",
      "RStudio",
      "Introduction"
    ],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nTélécharger R et RStudio\r\nImporter et vérifier les données\r\nCompter le nombre d’espèces menacées\r\nCréer un vecteur et le représenter\r\nCréer un dataframe et le représenter\r\nDéfi\r\nGlossaire\r\n\r\n\r\n\r\n\r\nCe tutoriel est adapté de Getting\r\nstarted with R and RStudio du site Our Coding Club.\r\n\r\n\r\n\r\nDessin de Allison\r\nHorst\r\nIntroduction\r\n\r\nLes objectifs de ce tutoriel sont les suivants :\r\nComprendre ce qu’est R (et RStudio)\r\nPrendre la bonne habitude de travailler avec des scripts\r\nApprendre à importer des données dans R\r\nApprendre à manipuler des objets (vecteurs et data frames)\r\nCréer un graphique basique\r\nVoici les étapes que nous allons suivre pour y\r\nparvenir :\r\nTélécharger R et RStudio\r\nImporter et vérifier les données\r\nCompter le nombre d’espèces menacées\r\nCréer un vecteur et le représenter\r\nCréer un data frame et le représenter\r\nDéfi\r\nGlossaire\r\nQu’est-ce que R?\r\nR est un langage de programmation statistique qui a\r\nrapidement gagné en popularité dans de nombreux domaines scientifiques.\r\nIl a été développé par Ross Ihaka et Robert\r\nGentleman comme implémentation libre du langage de\r\nprogrammation S.\r\n\r\nR désigne également le logiciel qui utilise ce\r\nlangage pour des calculs statistiques (et tout un tas d’autres\r\napplications !). Il dispose d’une communauté en ligne\r\ntrès active ainsi que d’extensions pour presque tous\r\nles domaines et applications possibles et imaginables.\r\n\r\nContrairement à d’autres logiciels de statistiques comme Minitab ou\r\nSPSS, R peut être exécuté entièrement en ligne de\r\ncommande et ne nécessite pas d’interface graphique, ce qui lui\r\nconfère une grande flexibilité.\r\n\r\nVoici quelques avantages de R :\r\nC’est un outil libre et open source (tout le monde\r\npeut utiliser le code et voir comment il fonctionne)\r\nC’est un langage de programmation plutôt qu’une interface graphique,\r\nce qui permet à l’utilisateur de sauvegarder facilement des\r\nscripts sous forme de texte pour les ré-utiliser ou les\r\npartager\r\nBeaucoup de personnes l’utilisent dans beaucoup de domaines\r\ndifférents - il est rare d’être confronté à un problème qui n’a\r\njamais été résolu !\r\n\r\nTélécharger R et RStudio\r\nLa plupart des utilisateurs interagissent avec R à l’aide d’une\r\ninterface graphique, dont la plus connue est\r\nRStudio. RStudio permet d’avoir accès dans une seule\r\nfenêtre à vos scripts, à vos données,\r\nà vos graphiques, à vos résultats,\r\nainsi qu’à de l’aide.\r\n\r\nTéléchargez R sur le site du\r\nCRAN (The Comprehensive R Archive Network)\r\nTéléchargez RStudio (“free open\r\nsource desktop version”)\r\nSur Mac, vous aurez également besoin de XQuartz\r\n\r\nOuvrez RStudio, puis cliquez sur “File / New File / R\r\nscript”\r\n\r\n\r\n\r\nVous verrez une fenêtre comme celle ci-dessus, avec quatre panneaux\r\n:\r\n1) La console : vous pouvez y taper du code et\r\nl’exécuter avec Entrée.\r\n\r\nEssayez de taper et d’exécuter 2+2\r\n2) Le script : vous pouvez - et c’est préférable - y\r\ntaper du code. Pour l’exécuter, placez-vous à la fin de la ligne et\r\nutilisez la combinaison de touches Ctrl + R (Windows) ou\r\nCmd + Entrée (Mac).\r\n\r\nSur les ordinateurs avec une version récente de Windows,\r\nCtrl + Entrée\r\n3) L’environnement : aperçu de votre espace de\r\ntravail (données importées, objets créés, fonctions définies, …).\r\n4) Fichiers / Graphiques / Packages / Aide : permet\r\nde naviguer dans vos dossiers, de visualiser vos graphiques, de voir\r\nquels packages sont installés et chargés, et d’obtenir de l’aide.\r\nA propos des scripts :  gardez bien à l’esprit\r\nque le code tapé directement dans la console ne sera pas sauvegardé par\r\nR : il disparaît une fois exécuté (vous pouvez toutefois accéder aux\r\ndernières commandes à l’aide de la touche Flèche du haut de\r\nvotre clavier). L’utilisation d’un script pour taper votre code vous\r\npermet d’en garder une trace. C’est un peu comme quand vous rédigez un\r\ndocument dans Word : vous pouvez sauvegarder votre progression pour\r\nreprendre là où vous en étiez, ou faire des modifications. Lorsque vous\r\ntapez du code dans un script, pensez à le sauvegarder régulièrement\r\n(Ctrl + S).\r\nIl est fortement recommandé d’ajouter à votre code des commentaires\r\ndécrivant les étapes. Pour cela, insérez un hashtag (#)\r\ndevant une ligne de votre script (ou Ctrl + Shift + C).\r\nToutes les lignes qui commencent par un # seront\r\nconsidérées par R comme du texte et non du code, et ne seront pas\r\nexécutées. Ces commentaires apporteront des informations précieuses pour\r\ntoute personne qui lira votre script (y compris vous-même quand vous\r\nreviendrez dessus dans un certain temps !). Comme tout document écrit,\r\nles scripts sont plus facilement lisibles quand ils sont bien structurés\r\net clairs.\r\nA propos de l’espace de travail :  votre espace de\r\ntravail contient tout ce que vous utilisez lors d’une session R. En\r\nquittant R, vous aurez le choix de sauvegarder ou non cet espace de\r\ntravail. Il est préférable de ne pas le faire et de démarrer chaque\r\nsession avec en espace de travail vide. \r\nTéléchargez les données\r\nLa meilleure façon d’apprendre un nouveau langage est de le\r\npratiquer. Nous allons analyser une liste d’espèces\r\nd’oiseaux menacées en Auvergne (données de 2015 obtenues sur le site de\r\nla DREAL).\r\nCes données se trouvent dans un fichier appelé\r\noiseaux.csv.\r\n1) Créez un nouveau dossier sur votre ordinateur :\r\nvous allez y télécharger les données, et vous pourrez y sauvegarder\r\nvotre script et vos graphiques. Choisissez un nom explicite, par exemple\r\ncodons_01_intro_r\r\n\r\nEvitez les espaces vides dans vos noms de dossiers !\r\n2) Cliquez sur ce\r\nlien pour télécharger le fichier\r\noiseaux.csv\r\n3) Cliquez sur “Code” puis “Download ZIP” (voir\r\nci-dessous)\r\n\r\n\r\n\r\n4) Choisissez comme emplacement de sauvegarde le dossier que\r\nvous venez de créer\r\n5) Dézippez le dossier\r\nCommencez à écrire votre\r\nscript\r\nPour l’instant, vous pouvez noter la date et l’objectif du tutoriel -\r\ncompter le nombre d’espèces d’oiseaux menacées d’extinction en Auvergne.\r\nVous pouvez copier l’exemple ci-dessous pour le coller et l’éditer dans\r\nvotre propre script :\r\n\r\n\r\n# Ateliers codon(s)!\r\n# 01 - Premiers pas avec R\r\n# Lundi 09/05/2022\r\n\r\n\r\n\r\nLes lignes suivantes dans votre script servent généralement à charger\r\nles packages dont vous aurez besoin pour votre analyse.\r\nUn package contient des commandes qui peuvent être chargées dans R pour\r\napporter des fonctionnalités supplémentaires (il existe par exemple des\r\npackages pour formater des données ou pour créer des cartes).\r\nUn package doit tout d’abord être téléchargé et\r\ninstallé sur votre ordinateur à l’aide de la commande\r\ninstall.packages(\"nom-du-package\") avant d’être\r\nchargé pour être utilisé à l’aide de la commande\r\nlibrary(nom-du-package). Un package n’a besoin d’être\r\ninstallé qu’une seule fois, vous pouvez donc le faire directement dans\r\nla console plutôt que de sauvegarder la ligne de code dans votre script\r\net d’ainsi le ré-installer à chaque fois que vous exécutez votre script.\r\nNous allons utiliser le package dplyr qui\r\nfournit des fonctionnalités supplémentaires pour la manipulation et le\r\nformatage de données.\r\n\r\nNotez bien la présence de guillemets autour du nom du package dans\r\nl’appel à la fonction install.packages(), et leur absence\r\ndans l’appel à la fonction library()\r\n\r\n\r\ninstall.packages(\"dplyr\")\r\nlibrary(dplyr)\r\n\r\n\r\n\r\nNous allons maintenant définir notre répertoire de\r\ntravail - le dossier dans lequel R cherchera les données à\r\nimporter et sauvegardera les graphiques. C’est dans notre cas le dossier\r\ndans lequel nous avons téléchargé les données.\r\nQuand vous aurez à travailler sur des projets plus importants, vous\r\npourrez tout à fait créer un dossier racine (par ex.\r\n“nom_du_projet/”), le définir comme répertoire de travail, et créer des\r\nsous-dossiers pour organiser les fichiers (par ex.\r\n“nom_du_projet/donnees_brutes/”, “nom_du_projet/figures/”, …).\r\nPour afficher le réperoire de travail, utilisez la commande\r\ngetwd() (pour get working directory). La commande\r\nsetwd(\"nom-du-repertoire-de-travail\") (set working\r\ndirectory) permet de définir un nouveau répertoire de travail.\r\n\r\nFaites attention au sens des slashes dans vos chemins de\r\ndossiers !\r\n\r\n\r\nsetwd(\"C:/User/Codons-01-PremiersPasAvecR\")\r\n# Remplacez le chemin ci-dessus par le votre\r\n\r\n\r\n\r\n\r\nL’auto-complétion est votre alliée ! Tapez quelques lettres puis sur la\r\ntouche Tab et R complètera pour vous.\r\nImporter et vérifier les données\r\nPour importer les données dans RStudio, deux options s’offrent à vous\r\n:\r\nCliquer sur le bouton Import Dataset\r\n\r\n\r\n\r\nIndiquez quel fichier vous souhaitez importer, et RStudio vous\r\nproposera un aperçu de vos données. Assurez-vous qu’à côté de\r\nHeading vous avez sélectionné Yes (ceci indique à R\r\nqu’il doit considérer la première ligne de vos données comme des noms de\r\ncolonnes). Cliquez enfin sur Import.\r\n\r\n\r\n\r\nDans la console vous verrez le code utilisé pour importer vos\r\ndonnées, y compris le chemin vers votre fichier - il est utile de copier\r\ncette ligne de code et de la coller dans votre script, pour que vous\r\nsachiez d’où vient votre jeu de données.\r\nVous remarquerez que le chemin vers votre fichier débute par\r\nC:/. Il s’agit du chemin absolu vers le\r\nfichier à importer, qui ne tient pas compte du fait que vous avez défini\r\nun répertoire de travail. Vous pouvez également utiliser le\r\nchemin relatif qui indique l’emplacement du fichier à\r\npartir de votre répertoire de travail (voir ci-dessous)\r\nUtiliser la commande read.csv() : R\r\nfonctionne mieux avec des fichiers .csv (valeurs séparées\r\npar des virgules). Si vous travaillez dans Excel, cliquez sur\r\nEnregistrer sous et choisissez csv comme extension\r\nde fichier.\r\n\r\nDans Excel, évitez les espaces dans vos noms de colonnes (ex :\r\nnom_latin plutôt que nom latin)\r\nCertains ordinateurs utilisent le point-virgule ; comme\r\nséparateur dans les fichiers .csv. Vous pouvez dans ce cas\r\nutiliser la fonction read.csv2(), ou préciser dans la\r\nfonction read.csv() l’argument sep = \";\".\r\n\r\n\r\noiseaux <- read.csv(\"Codons-01-PremiersPasAvecR-main/oiseaux.csv\")\r\n# modifiez le chemin vers le fichier si nécessaire\r\n\r\n\r\n\r\nA propos des objets : R est langage orienté\r\nobjet - cela signifie que tout ce que vous importez et créez est stocké\r\ndans des objets que vous allez nommer. Ici, nous avons assigné le\r\nfichier oiseaux.csv à l’objet oiseaux à l’aide\r\nde la flèche <-. Nous aurions tout à fait pu l’appeler\r\nmesdonnees ou oiseaux_liste_rouge_auvergne,\r\nmais il est préférable de choisir un nom unique, informatif et court.\r\nDans le panneau Environment de RStudio vous pouvez voir les\r\nnoms de tous les objets actuellement chargés dans R. Assurez-vous que\r\nvous voyez bien l’objet oiseaux.\r\nQuand vous importez vos données dans R, il est très probable qu’elles\r\ndeviennent un objet qu’on appelle un data frame : un tableau contenant\r\ndes lignes (observations) et des colonnes (variables).\r\nUne des premières choses à faire est de vous assurer que vos\r\ndonnées ont été importées sans erreur. Il est recommandé de\r\ntoujours exécuter ce code dans la console et de vérifier le résultat -\r\nvoyez-vous des erreurs, est-ce que les nombres/noms ont du sens ? Si\r\nvous passiez directement à l’analyse, vous risqueriez de vous rendre\r\ncompte plus tard que R n’a pas importé vos données correctement et vous\r\ndevriez recommencer, ou pire, vous pourriez analyser de mauvaises\r\ndonnées sans vous en rendre compte. Pour visualiser davantage que les\r\nquelques premières lignes, vous pouvez également cliquer sur l’objet\r\ndans le panneau Environment, ce qui affichera un tableau dans\r\nun nouvel onglet à côté de votre script. Des fichiers peuvent être trop\r\nlarges pour êtres affichés entirement, gardez donc à l’esprit qu’il peut\r\ny avoir des lignes ou des colonnes manquantes.\r\n\r\n\r\nhead(oiseaux)  # affiche les premières lignes\r\ntail(oiseaux)  # affiche les dernières lignes\r\nstr(oiseaux)  # affiche le type de variables\r\n\r\n\r\n\r\nLa commande str(nom.objet) affiche la structure de vos\r\ndonnées. Très souvent, les analyses ne se déroulent pas comme prévu car\r\nR s’est trompé de type de variable. Imaginez que vos données comportent\r\nquatre groupes d’étude appelés “1, 2, 3, 4”. Vous savez pertinnement\r\nqu’il s’agit d’une variable catégorique (un facteur),\r\nmais R peut considérer qu’il s’agit d’une variable numérique.\r\n\r\nPensez toujours à vérifier la structure de vos données !\r\nLa fonction str(oiseaux) nous indique que la variable\r\ncategorie est une chaîne de caractères (chr). Nous\r\npréférerions que R considère cette variable comme étant catégorique - un\r\nfacteur. Nous allons le préciser en accédant à la colonne concernée à\r\nl’aide du signe dollar $ :\r\n\r\n\r\nhead(oiseaux$categorie)  # premiers éléments de la variable\r\nclass(oiseaux$categorie)  # type de variable\r\noiseaux$categorie <- as.factor(oiseaux$categorie)\r\n\r\n\r\n\r\nLa dernière ligne du code ci-dessus permet de transformer la variable\r\ncategorie en un facteur. La fonction\r\nas.factor(oiseaux$categorie) toute seule serait exécutée,\r\nmais ne modifierait pas les données stockées dans l’objet\r\noiseaux. Il faut pour cela ré-assigner cette variable\r\ntransformée en facteur à la variable d’origine. Pour vous assurer que\r\nl’opération a bien fonctionné, vous pouvez exécuter à nouveau la\r\nfonction class(oiseaux$categorie).\r\nLes fonctions suivantes permettent d’explorer autrement vos données\r\n:\r\n\r\n\r\ndim(oiseaux)  # dimensions de l'objet\r\nsummary(oiseaux)  # synthèse de l'objet\r\nsummary(oiseaux$categorie)  # synthèse de la variable\r\n\r\n\r\n\r\nCompter le nombre d’espèces menacées\r\nNotre objet oiseaux dresse une liste des espèces\r\nd’oiseaux menacées d’extinction en Auvergne, avec différents niveaux de\r\npréoccupation.\r\nNous allons compter le nombre d’espèces pour chaque\r\nniveau de préoccupation et créer une\r\nvisualisation de ce comptage.\r\nCommençons par séparer oiseaux en plusieurs objets, un\r\npour chaque niveau de menace, à l’aide de la fonction\r\nfilter() du package dplyr.\r\n\r\n\r\nen_danger_critique <- filter(oiseaux, categorie == \"En danger critique\")\r\n# Le 1er argument de la fonction est le data frame, \r\n# Le 2e argument est la condition à appliquer au filtre\r\n\r\n\r\n\r\n\r\nL’opérateur == permet de sélectionner les\r\nvaleurs “strictement égales à”\r\nR est sensible à la casse :\r\nfilter(oiseaux, categorie == \"en danger critique\") ne\r\nfonctionnera pas !\r\nProcédons de la même façon pour chaque catégorie. Si vous avez un\r\ndoute sur le nom ou l’orthographe d’une des catégories, pensez à la\r\nfonction summary(oiseaux$categorie).\r\nUne fois que vous avez créé tous les objets, vous allez pouvoir\r\ncompter le nombre d’espèces pour chaque catégorie. Nous\r\nallons pour cela imbriquer deux fonctions : unique() (pour\r\nidentifier chaque espèce) et length() (pour les\r\ncompter).\r\n\r\nVous pouvez essayer ces deux fonctions séparément dans la console\r\n\r\n\r\na <- length(unique(en_danger_critique$nom_francais))\r\n# choisissez des noms pratiques pour vos objets\r\n# \"a\" n'est peut-être pas le plus explicite ...\r\n\r\n\r\n\r\nProcédez de la même façon pour toutes les catégories. Cette manière\r\nde procéder peut vous sembler rébarbative … Nous verrons dans un\r\nprochain tutoriel comment procéder de manière plus efficace !\r\nTapez dans la console le nom d’un des objets que vous venez de créer.\r\nQue vous retourne-t-elle ?\r\nCréer un vecteur et le représenter\r\nNous allons maintenant combiner tous ces objets dans un\r\nvecteur - un objet à une dimension (à la différence\r\nd’un data frame qui en possède deux).\r\nNous utilisons pour cela la fonction c() (pour\r\nconcaténer), ainsi que la fonction names() pour\r\najouter des étiquettes aux valeurs.\r\n\r\n\r\ncomptage_especes <- c(a,b, c, d, e)\r\nnames(comptage_especes) <- c(\"En danger critique\",\r\n                             \"En danger\",\r\n                             \"Vulnerable\",\r\n                             \"Quasi-menacee\",\r\n                             \"Preoccupation mineure\")\r\n\r\n\r\n\r\n\r\nAttention à garder le même ordre !\r\nNotes :\r\n- Les espaces avant et après la flèche <- et après la\r\nvirgule , facilitent la lecture du code\r\n- Faites attention à vérifier que les valeurs du vecteur correspondent\r\nbien aux étiquettes - vous ne voudriez pas inverser les espèces “En\r\ndanger critique” avec les espèces “Quasi-menacées”! L’utilisation d’un\r\nscript permet de revenir sur le code et de vérifier qu’on ne s’est pas\r\ntrompé. Une bonne pratique serait de nommer les objets de façon plus\r\nexplicite, comme nb_en_danger_critique,\r\nnb_en_danger, …\r\n- Si vous cliquez à l’aide de la souris après une parenthèse, RStudio\r\nsurlignera la parenthèse lui correspondant. Les parenthèses manquantes,\r\nen particulier quand vous utilisez des fonctions imbriquées comme vous\r\nl’avez fait avec length(unique()) sont une des sources de\r\nfrustration et d’erreur les plus courantes quand vous commencez à coder\r\n!\r\nNous pouvons maintenant visualiser le nombre d’espèces par\r\ncatégorie à l’aide de la fonction barplot(). Les\r\ngraphiques s’affichent dans le panneau inférieur droit de RStudio.\r\n\r\n\r\nbarplot(comptage_especes)\r\n\r\n\r\n\r\nEt voilà votre premier graphique avec R ! Mais il y a des\r\nchoses à modifier : il manque des titres aux axes, toutes les\r\nétiquettes ne sont pas visibles, et la valeur pour les espèces dans la\r\ncatégorie “Préoccupation mineure” (n = 68) dépasse la plus grande valeur\r\naffichée sur l’axe Y.\r\nPour savoir comment apporter ces modifications à votre graphique,\r\nutilisez la fonction help(barplot) ou ?barplot\r\npour afficher l’aide de la fonction. Survolez le document qui s’affiche\r\net essayez de trouver des solutions.\r\n\r\n\r\nhelp(barplot)  # aide de la fonction barplot\r\nhelp(par)  # aide pour les graphiques\r\n\r\n\r\n\r\nNous aimerions également sauvegarder notre graphique. Là encore, vous\r\navez deux options : - Cliquer sur Export dans\r\nle panneau des graphiques : choisissez où sauvegarder le graphique (par\r\ndéfaut dans votre répertoire de travail) et modifiez le nom du fichier\r\npour qu’il soit plus explicite que Rplot01.png. Vous pouvez\r\naussi ajuster les dimensions de la figure.\r\n\r\n\r\n\r\nUtiliser les fonctions png() et\r\ndev.off() qui servent respectivement à ouvrir et\r\nfermer l’outil graphique :\r\n\r\n\r\npng(\"barplot.png\",\r\n    width = 1600, height = 600)\r\n\r\nbarplot(comptage_especes,\r\n        xlab = \"Niveau de menace\", ylab = \"Nombre d'espèces\",\r\n        ylim = c(0, 70),\r\n        cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5)\r\n\r\ndev.off()\r\n\r\n\r\n\r\n\r\nL’argument cex permet d’augmenter (> 1) ou de diminuer\r\n(< 1) la taille du texte\r\n\r\n\r\n\r\nCréer un dataframe et le représenter\r\nNous avons travaillé jusqu’ici avec des vecteurs, un\r\ntype d’objet bien adapté quand on manipule une seule série de valeurs à\r\nla fois. Dans la pratique, nous manipulons souvent plusieurs variables\r\net plusieurs types de données en même temps - par exemple des valeurs\r\ncontinues et des valeurs catégoriques. Les data frames\r\nsont alors mieux adaptés : il s’agit de tableaux de valeurs ayant une\r\nstructure en deux dimensions, des lignes et des\r\ncolonnes, chaque colonne pouvant contenir un type\r\ndifférent de données.\r\nNous pourrions par exemple avoir un tableau de données dont une\r\ncolonne appelée “Envergure” contient des mesures d’envergures chez\r\ndifférentes espèces d’oiseaux, et une deuxième colonne appelée “Espèce”\r\ncontient les noms des espèces dont on a mesuré l’envergure.\r\nLa matrice est un autre format possible de données :\r\nelle peut également contenir plusieurs lignes, mais toutes les variables\r\nd’une matrice doivent être du même type et contenir le même nombre\r\nd’éléments.\r\nConseil de bonne pratique : conservez toujours\r\nune copie de vos données brutes ! Votre script R vous permet de\r\nmanipuler et modifier ces données sans toucher aux données brutes. Si\r\nvous utilisez des logiciels de retouche photo, c’est un peu la même\r\nchose que d’ajouter des couches apportant des modifications à votre\r\ncliché sans modifier la photo d’origine. Ceci dit, si vos données brutes\r\nnécessitent un long morceau de code pour être analysables, vous pouvez\r\nsauvegarder une version nettoyée de vos données brutes pour ne pas avoir\r\nà refaire toutes les étapes de nettoyage des données.\r\nNous allons utiliser deux nouvelles fonctions :\r\ndata.frame() pour créer notre data frame et\r\nwrite.csv() pour le sauvegarder. Nous allons créer les\r\nobjets “categories” et “comptage”, transformer l’objet “categories” en\r\nfacteur, puis rassembler ces deux objets dans un data frame.\r\n\r\n\r\n# Creer un objet \"categories\"\r\ncategories <- c(\"En danger critique\",\r\n                \"En danger\",\r\n                \"Vulnerable\",\r\n                \"Quasi-menacee\",\r\n                \"Preoccupation mineure\")\r\n\r\n# Transformer cet objet en facteur\r\ncategories_f <- factor(categories)\r\n\r\n# Creer un objet \"comptage\"\r\ncomptage <- c(a, b, c, d, e)\r\n\r\n# Creer un data frame avec ces deux vecteurs\r\nespeces_menacees <- data.frame(categories_f, comptage)\r\n\r\n# Sauvegarder le data frame\r\nwrite.csv(especes_menacees, file = \"especes_menacees.csv\")\r\n\r\n\r\n\r\nPour créer un barplot à partir de ce data frame, vous devrez modifier\r\nle code utilisé précédemment - il faut en effet préciser quelle variable\r\ndu data frame vous souhaitez représenter.\r\n\r\n\r\npng(\"barplot2.png\",\r\n    width = 1600, height = 600)\r\n\r\nbarplot(especes_menacees$comptage,\r\n        names.arg = c(\"En danger critique\",\r\n                      \"En danger\",\r\n                      \"Vulnerable\",\r\n                      \"Quasi-menacee\",\r\n                      \"Preoccupation mineure\"),\r\n        xlab = \"Niveau   de menace\", ylab = \"Nombre d'especes\",\r\n        ylim = c(0, 70),\r\n        cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5)\r\n\r\n\r\n\r\n\r\nIl existe une manière plus simple de préciser les étiquettes …\r\nBilan du tutoriel :\r\nVous vous êtes familiarisé avec l’interface RStudio\r\nVous savez comment créer et annoter un fichier de script\r\nVous pouvez importer vos propres données dans RStudio\r\nVous savez comment vérifier et explorer vos données\r\nVous pouvez générer des graphiques basiques et les exporter\r\nDéfi\r\nSi c’est votre premier contact avec R, ne vous inquiétez pas si vous\r\nne comprenez pas tout, tout de suite. Revenez à tête reposée sur les\r\nparties que vous avez trouvées plus difficiles.\r\nVoici un petit défi pour mettre en pratique ce que vous avez vu dans\r\nce tutoriel.\r\nVous verrez ci-dessous des données (fictives) de mesures d’envergure\r\n(en cm) pour quatre espèces différentes d’oiseaux. Essayez de créer un\r\nbarplot de l’envergure moyenne pour chacune des espèces et\r\nsauvegardez-le sur votre ordinateur.\r\n\r\nIl vous faudra trouver une fonction permettant de calculer une moyenne\r\nespece\r\nenvergure (cm)\r\nAigle\r\n195\r\nChouette\r\n85\r\nColibri\r\n8\r\nMoineau\r\n24\r\nAigle\r\n201\r\nChouette\r\n102\r\nColibri\r\n9\r\nMoineau\r\n21\r\nAigle\r\n185\r\nChouette\r\n91\r\nColibri\r\n9\r\nMoineau\r\n22\r\nSolution\r\nNe regardez pas avant d’avoir essayé ! Il n’existe\r\npas une seule solution possible, plusieurs façons de procéder amèneront\r\nau même résultat. Les noms des objets et l’apparence du graphique seront\r\nsans doute différents, et cela ne pose aucun problème - du moment que\r\nles valeurs elles-mêmes sont correctes.\r\n\r\n\r\nShow code\r\n\r\n# Extraire les envergures pour chaque espece\r\nenv_aigle <- c(195, 201, 185)\r\nenv_chouette <- c(85, 102, 91)\r\nenv_colibri <- c(8, 9, 9)\r\nenv_moineau <- c(24, 21, 22)\r\n\r\n# Calculer l'envergure moyenne\r\nenv_moy_aigle <- mean(env_aigle)\r\nenv_moy_chouette <- mean(env_chouette)\r\nenv_moy_colibri <- mean(env_colibri)\r\nenv_moy_moineau <- mean(env_moineau)\r\n\r\n# Rassembler ces valeurs moyennes dans un vecteur\r\nenv_moyenne <- c(env_moy_aigle, env_moy_chouette, env_moy_colibri, env_moy_moineau)\r\n\r\n# Creer un vecteur avec les noms des especes (attention à l'ordre !)\r\nespeces <- c(\"Aigle\", \"Chouette\", \"Colibri\", \"Moineau\")\r\n\r\n# Transformer ce vecteur en un facteur\r\nespeces_f <- as.factor(especes)\r\nclass(especes_f)\r\n\r\n# Combiner les deux vecteurs dans un data frame\r\nenvergure <- data.frame(especes_f, env_moyenne)\r\n\r\n# Sauvegarder le barplot dans un fichier\r\npng(\"barplot_envergure.png\",\r\n    width = 1600, height = 600)\r\n\r\nbarplot(envergure$env_moyenne,\r\n        names.arg = envergure$especes_f,\r\n        xlab = \"Espèces\", ylab = \"Envergure moyenne\",\r\n        ylim = c(0, 200),\r\n        cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5,\r\n        col = \"gold\")  # modifier la couleur des barres\r\n\r\ndev.off()\r\n\r\n\r\n\r\nGlossaire\r\n Voici quelques termes importants vus dans ce tutoriel :\r\nargument : élément d’une fonction, essentiel ou\r\noptionnel, qui précise ou modifie la façon dont la fonction est\r\nexécutée. Par exemple, il peut s’agir du chemin vers un fichier qui sera\r\nimporté, ou de l’emplacement où sera sauvegardé un fichier :\r\nfile = \"chemin-vers-le-fichier. Il peut aussi modifier les\r\ncouleurs d’un graphique : col = \"blue\". Vous pouvez trouver\r\nune liste des arguments d’une fonction à l’aide de la commande\r\n?nom-de-la-fonction.\r\nclasse : le type de données contenu dans une\r\nvariable : habituellement des charactères (texte/mots), des nombres\r\nentiers ou relatifs, ou des facteurs (des valeurs de groupement, utiles\r\nquand vos données contiennent de multiples observations issues de\r\ndifférents sites ou traitements).\r\ncommande : un morceau de code qui exécute une\r\naction, contient généralement une ou plusieurs fonctions. Vous pouvez\r\nexécuter une commande en cliquant sur “Run” ou grâce aux raccourcis\r\nclavier comme Cmd + Entrée, Ctrl + Entrée ou\r\nCtrl + R.\r\ncommentaire : un morceau de texte dans un script\r\nqui débute par un hashtag # et qui n’est pas lu comme une\r\ncommande. Les commentaires rendent le code plus facilement lisible pour\r\nd’autres personnes : utilisez-les pour créer des sections dans votre\r\nscript et pour annoter chaque étape de votre analyse.\r\nconsole : la fenêtre dans laquelle vous pouvez\r\ntaper du code directement en ligne de commande (2+2 puis\r\nEntrée retournera 4), et où les résultats des\r\ncommandes seront affichés.\r\ndata frame : un type d’objet R composé de\r\nnombreuses lignes et colonnes (pensez à une feuille Excel). Généralement\r\nles colonnes contiennent différentes variables (par exemple âge,\r\ncouleur, poids, envergure), et les lignes les observations de ces\r\nvariables (par exemple oiseau1, oiseau2, oiseau3).\r\nespace de travail : c’est votre environnement de\r\ntravail virtuel, il contient toutes les fonctions des packages que vous\r\navez chargés, les objets que vous avez créés, et ainsi de suite. Il est\r\npréférable de démarrer une session de travail avec un espace de travail\r\nvide.\r\nfichier csv : un type de fichier couramment\r\nutilisé pour importer des données dans R, où les valeurs des différentes\r\nvariables sont compressées (une chaîne, ou une ligne de valeurs par\r\nligne) et séparées seulement par des virgules (indiquant les colonnes).\r\nR peut aussi lire des fichiers Excel (.xlsx), mais cela n’est pas\r\nrecommandé car il est difficile d’éviter les erreurs de\r\nformatage.\r\nfonction : du code qui exécute une action,\r\nc’est-à-dire tout ce que vous faites dans R. Une fonction prend une\r\nentrée, la modifie d’une façon ou d’une autre, et retourne une sortie\r\n(un objet, un résultat de test, un fichier, un graphique). Il existe des\r\nfonctions pour importer, convertir et manipuler des données, pour\r\neffectuer des calculs spécifiques (essayez de deviner ce que\r\nretourneraient les fonctions min(10, 15, 5) et\r\nmax(10, 15, 5)), générer des graphiques, et bien\r\ndavantage.\r\nobjet : les briques de construction de R. Si R\r\nétait un langage parlé, les fonctions seraient les verbes (actions) et\r\nles objets les noms (les sujets ou les objets de ces actions). On fait\r\nappel à un objet par son nom sans guillemets. Les objets permettent de\r\nstocker des données, et prennent différentes formes. Les objets les plus\r\ncourants sont les data frames et les vecteurs, mais il en existe\r\nd’autres, comme les listes et les matrices.\r\npackage : un ensemble de fonctions qui apportent\r\ndes fonctionnalités supplémentaires à R. De nombreux packages sont\r\ninclus dans R, d’autres peuvent être téléchargés pour des besoins\r\nspécifiques.\r\nrépertoire de travail : le dossier sur votre\r\nordinateur associé à votre session R actuelle, contenant les données que\r\nvous allez importer et où vous sauvegarderez des fichiers. Vous pouvez\r\nle définir au début de votre session à l’aide de la fonction\r\nsetwd().\r\nscript : comme un éditeur de texte, un script\r\nvous permet d’écrire votre code et de le sauvegarder pour des usages\r\nfuturs. Il contient un mélange de code et de commentaires et est\r\nsauvegardé comme un simple fichier texte que vous pouvez aisément\r\npartager pour que n’importe qui puisse reproduire votre\r\ntravail.\r\nvecteur : un type d’objet R qui ne contient\r\nqu’une seule dimension : il stocke une ligne de valeurs qui peuvent être\r\ndes caractères, des nombres, etc.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/premiers-pas-avec-r/img/happy-r.png",
    "last_modified": "2022-05-09T13:02:23+02:00",
    "input_file": {}
  }
]
